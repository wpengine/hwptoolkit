name: "Run Codeception Tests"
description: "Sets up environment and runs Codeception test suites"
inputs:
  working-directory:
    description: "Plugin directory to run tests in"
    required: true
  php:
    description: "PHP version"
    required: true
  extensions:
    description: "PHP extensions"
    required: true
  wordpress:
    description: "WordPress version"
    required: true
  composer-options:
    description: "Additional composer options"
    required: false
    default: "--no-progress"
runs:
  using: "composite"
  steps:
    - name: Setup PHP with Cached Composer
      uses: ./.github/actions/setup-php-composer
      with:
        php-version: ${{ inputs.php }}
        working-directory: ${{ inputs.working-directory }}
        composer-options: ${{ inputs.composer-options }}

    - name: Setup environment
      run: |
        cp ${{ inputs.working-directory }}/.docker/.env.ci ${{ inputs.working-directory }}/.env
        cd ${{ inputs.working-directory }}
        echo "INCLUDE_EXTENSIONS=${{ inputs.extensions }}" >> .env
        echo "WP_VERSION=${{ inputs.wordpress }}" >> .env
        echo "PHP_VERSION=${{ inputs.php }}" >> .env
      shell: bash

    - name: Build test environment
      run: composer run docker:build
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        WP_VERSION: ${{ inputs.wordpress }}
        PHP_VERSION: ${{ inputs.php }}

    - name: Start test environment
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        docker compose --env-file .env up --detach

        CONTAINER_ID=$(docker compose ps -q wordpress)
        if [ -n "$CONTAINER_ID" ]; then
          docker exec $CONTAINER_ID init-docker.sh
        else
          echo "Error: WordPress container not found."
          exit 1
        fi
      env:
        WP_VERSION: ${{ inputs.wordpress }}
        PHP_VERSION: ${{ inputs.php }}

    - name: Run Acceptance Tests w/ Docker
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        docker exec \
          --env DEBUG=${{ env.DEBUG }} \
          --env SKIP_TESTS_CLEANUP=${{ env.SKIP_TESTS_CLEANUP }} \
          --env SUITES=acceptance \
          $(docker compose ps -q wordpress) \
          bash -c "cd wp-content/plugins/$(basename ${{ inputs.working-directory }}) && bin/run-codeception.sh"
      env:
        DEBUG: ${{ env.ACTIONS_STEP_DEBUG }}
        SKIP_TESTS_CLEANUP: "true"
      continue-on-error: true

    - name: Run Functional Tests w/ Docker
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        docker exec \
          --env DEBUG=${{ env.DEBUG }} \
          --env SKIP_TESTS_CLEANUP=${{ env.SKIP_TESTS_CLEANUP }} \
          --env SUITES=functional \
          $(docker compose ps -q wordpress) \
          bash -c "cd wp-content/plugins/$(basename ${{ inputs.working-directory }}) && bin/run-codeception.sh"
      env:
        DEBUG: ${{ env.ACTIONS_STEP_DEBUG }}
        SKIP_TESTS_CLEANUP: "true"
      continue-on-error: true

    - name: Run WPUnit Tests w/ Docker
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        docker exec \
          --env COVERAGE=${{ inputs.coverage }} \
          --env USING_XDEBUG=${{ inputs.coverage }} \
          --env DEBUG=${{ env.DEBUG }} \
          --env SUITES=wpunit \
          $(docker compose ps -q wordpress) \
          bash -c "cd wp-content/plugins/$(basename ${{ inputs.working-directory }}) && bin/run-codeception.sh"
      env:
        DEBUG: ${{ env.ACTIONS_STEP_DEBUG }}
