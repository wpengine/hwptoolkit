# This workflow correctly detects all modified plugins with a quality config
# and runs checks for each one individually.

name: Code Quality

on:
  push:
    branches:
      - main
    paths:
      - "plugins/*/**.php"
      - "plugins/*/phpcs.xml" # Trigger if a config file changes
  pull_request:
    paths:
      - "plugins/*/**.php"
      - "plugins/*/phpcs.xml" # Trigger if a config file changes

jobs:
  # This job finds all modified plugins and creates a JSON list for the matrix
  detect-modified-plugins:
    runs-on: ubuntu-latest
    name: Detect modified plugins with quality config
    outputs:
      plugins: ${{ steps.detect.outputs.plugins }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history to ensure git diff is accurate
          fetch-depth: 0

      - name: Find modified plugins with phpcs.xml
        id: detect
        run: |
          # Establish the correct base and head commits for the diff
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else # This handles the 'push' event
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.event.after }}"
          fi

          echo "Detecting changed plugins between $BASE_SHA and $HEAD_SHA..."

          # Get changed files, extract unique plugin slugs, and check for phpcs.xml
          PLUGINS_WITH_CONFIG=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" \
            | grep -E '^plugins/[^/]+/' \
            | sed -E 's|plugins/([^/]+)/.*|\1|' \
            | sort -u \
            | {
                plugins_json="["
                first=true
                while read -r plugin; do
                  if [[ -f "plugins/$plugin/phpcs.xml" ]]; then
                    echo "✅ Found phpcs.xml for changed plugin: $plugin"
                    if [[ "$first" = false ]]; then plugins_json="$plugins_json,"; fi
                    plugins_json="$plugins_json\"$plugin\""
                    first=false
                  else
                    echo "ℹ️ No phpcs.xml for changed plugin: $plugin. Skipping."
                  fi
                done
                plugins_json="$plugins_json]"
                echo "$plugins_json"
              })

          echo "plugins=${PLUGINS_WITH_CONFIG}" >> "$GITHUB_OUTPUT"
          echo "Matrix for next job: ${PLUGINS_WITH_CONFIG}"

  # This job runs if the matrix from the previous job is not empty
  quality-checks:
    needs: detect-modified-plugins
    # A cleaner condition: run only if the plugins list is not empty
    if: needs.detect-modified-plugins.outputs.plugins != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.detect-modified-plugins.outputs.plugins) }}
      fail-fast: false
    name: ${{ matrix.plugin }} php code quality checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # This step detects the PHP version for each specific plugin in the matrix
      - name: Detect PHP version for ${{ matrix.plugin }}
        id: get-php-version
        run: |
          PHP_VERSION="7.4" # Set a default PHP version
          COMPOSER_FILE="plugins/${{ matrix.plugin }}/composer.json"
          if [[ -f "$COMPOSER_FILE" ]]; then
            # Safely parse composer.json for the PHP version
            DETECTED_VERSION=$(jq -r '.require.php // ""' "$COMPOSER_FILE" | grep -oE '[0-9]+\.[0-9]+' | head -1)
            if [[ -n "$DETECTED_VERSION" ]]; then
              PHP_VERSION="$DETECTED_VERSION"
            fi
          fi
          # Use a heredoc to safely set the output, preventing format errors
          {
            echo 'plugins<<EOF'
            echo "${PLUGINS_WITH_CONFIG}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
          echo "Using PHP version ${PHP_VERSION} for ${{ matrix.plugin }}"

      - name: PHP Code Quality for ${{ matrix.plugin }}
        uses: ./.github/actions/code-quality
        with:
          working-directory: plugins/${{ matrix.plugin }}
          php-version: ${{ steps.get-php-version.outputs.php-version }}
          composer-options: "--no-progress --no-suggest"
